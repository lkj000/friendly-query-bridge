import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Shield, AlertTriangle, Info, Ticket } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Vulnerability } from '@/types/vulnerability';
import { supabase } from '@/lib/supabase';
import { toast } from '@/hooks/use-toast';

const severityIcons = {
  critical: <Shield className="h-4 w-4 text-red-500" />,
  high: <Shield className="h-4 w-4 text-orange-500" />,
  medium: <AlertTriangle className="h-4 w-4 text-yellow-500" />,
  low: <Info className="h-4 w-4 text-blue-500" />,
  info: <Info className="h-4 w-4 text-gray-500" />
};

interface VulnerabilityCardProps {
  vulnerability: Vulnerability;
}

export function VulnerabilityCard({ vulnerability }: VulnerabilityCardProps) {
  const createJiraTicket = async () => {
    try {
      const { data, error } = await supabase.functions.invoke('create-jira-ticket', {
        body: {
          summary: `[${vulnerability.source.toUpperCase()}] ${vulnerability.severity.toUpperCase()} Severity Vulnerability`,
          description: vulnerability.description,
          severity: vulnerability.severity,
          source: vulnerability.source,
          filePath: vulnerability.file_path,
          lineNumber: vulnerability.line_number
        }
      });

      if (error) throw error;

      toast({
        title: "JIRA Ticket Created",
        description: "The vulnerability has been successfully logged in JIRA.",
      });
    } catch (error) {
      console.error('Error creating JIRA ticket:', error);
      toast({
        title: "Error Creating Ticket",
        description: "Failed to create JIRA ticket. Please try again.",
        variant: "destructive",
      });
    }
  };

  return (
    <Card className="hover:shadow-lg transition-shadow">
      <CardHeader className="flex flex-row items-center space-x-2">
        <div className="flex items-center space-x-2">
          {severityIcons[vulnerability.severity]}
          <CardTitle className="text-sm font-medium">
            {vulnerability.source.toUpperCase()}
          </CardTitle>
        </div>
        <Badge 
          variant={vulnerability.severity === 'critical' ? 'destructive' : 'default'}
          className="ml-auto"
        >
          {vulnerability.severity}
        </Badge>
      </CardHeader>
      <CardContent>
        <p className="text-sm text-muted-foreground mb-4">{vulnerability.description}</p>
        {vulnerability.file_path && (
          <p className="text-xs mt-2 text-muted-foreground">
            {vulnerability.file_path}
            {vulnerability.line_number && `:${vulnerability.line_number}`}
          </p>
        )}
        <div className="flex justify-between items-center mt-4">
          <Badge variant="outline" className="mr-2">
            {vulnerability.status}
          </Badge>
          <Button
            variant="outline"
            size="sm"
            className="flex items-center gap-2"
            onClick={createJiraTicket}
          >
            <Ticket className="h-4 w-4" />
            Create JIRA Ticket
          </Button>
        </div>
      </CardContent>
    </Card>
  );
}