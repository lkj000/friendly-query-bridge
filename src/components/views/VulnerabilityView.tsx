import React, { useEffect } from 'react';
import { useQuery } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { Vulnerability } from '@/types/vulnerability';
import { VulnerabilityList } from '../vulnerability/VulnerabilityList';
import { toast } from '@/hooks/use-toast';
import { RealtimePostgresChangesPayload } from '@supabase/supabase-js';
import { Button } from '@/components/ui/button';
import { Bug } from 'lucide-react';

export function VulnerabilityView() {
  const { data: vulnerabilities, isLoading } = useQuery({
    queryKey: ['vulnerabilities'],
    queryFn: async () => {
      const { data, error } = await supabase
        .from('vulnerability_scans')
        .select('*')
        .order('created_at', { ascending: false });

      if (error) {
        toast({
          title: "Error fetching vulnerabilities",
          description: error.message,
          variant: "destructive",
        });
        throw error;
      }

      return data as Vulnerability[];
    }
  });

  const createTestTicket = async () => {
    try {
      const { data, error } = await supabase.functions.invoke('create-jira-ticket', {
        body: {
          summary: '[TEST] Sample Security Vulnerability',
          description: 'This is a test vulnerability ticket created to verify JIRA integration.',
          severity: 'medium',
          source: 'test',
          filePath: '/src/test/example.ts',
          lineNumber: 42
        }
      });

      if (error) throw error;

      toast({
        title: "Test JIRA Ticket Created",
        description: "A test ticket has been successfully created in JIRA.",
      });
    } catch (error) {
      console.error('Error creating test JIRA ticket:', error);
      toast({
        title: "Error Creating Test Ticket",
        description: "Failed to create test JIRA ticket. Please check the console for details.",
        variant: "destructive",
      });
    }
  };

  useEffect(() => {
    const channel = supabase
      .channel('vulnerability-changes')
      .on(
        'postgres_changes',
        { event: '*', schema: 'public', table: 'vulnerability_scans' },
        (payload: RealtimePostgresChangesPayload<Vulnerability>) => {
          if (payload.new && 'severity' in payload.new) {
            toast({
              title: "New Vulnerability Detected",
              description: `A new ${payload.new.severity} severity issue was found.`,
              variant: payload.new.severity === 'critical' ? "destructive" : "default",
            });
          }
        }
      )
      .subscribe();

    return () => {
      supabase.removeChannel(channel);
    };
  }, []);

  if (isLoading) {
    return <div className="p-4">Loading vulnerabilities...</div>;
  }

  return (
    <div className="p-4 space-y-4">
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-2xl font-semibold">Security Vulnerabilities</h2>
        <Button
          onClick={createTestTicket}
          variant="outline"
          className="flex items-center gap-2"
        >
          <Bug className="h-4 w-4" />
          Create Test JIRA Ticket
        </Button>
      </div>
      <VulnerabilityList vulnerabilities={vulnerabilities || []} />
    </div>
  );
}