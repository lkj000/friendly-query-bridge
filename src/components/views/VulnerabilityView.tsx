import React, { useEffect } from 'react';
import { useQuery } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { Vulnerability } from '@/types/vulnerability';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Shield, AlertTriangle, Info } from 'lucide-react';
import { toast } from '@/hooks/use-toast';

const severityIcons = {
  critical: <Shield className="h-4 w-4 text-red-500" />,
  high: <Shield className="h-4 w-4 text-orange-500" />,
  medium: <AlertTriangle className="h-4 w-4 text-yellow-500" />,
  low: <Info className="h-4 w-4 text-blue-500" />,
  info: <Info className="h-4 w-4 text-gray-500" />
};

export function VulnerabilityView() {
  const { data: vulnerabilities, isLoading } = useQuery({
    queryKey: ['vulnerabilities'],
    queryFn: async () => {
      const { data, error } = await supabase
        .from('vulnerability_scans')
        .select('*')
        .order('created_at', { ascending: false });

      if (error) {
        toast({
          title: "Error fetching vulnerabilities",
          description: error.message,
          variant: "destructive",
        });
        throw error;
      }

      return data as Vulnerability[];
    }
  });

  useEffect(() => {
    const channel = supabase
      .channel('vulnerability-changes')
      .on(
        'postgres_changes',
        { event: '*', schema: 'public', table: 'vulnerability_scans' },
        (payload) => {
          toast({
            title: "New Vulnerability Detected",
            description: `A new ${payload.new.severity} severity issue was found.`,
            variant: payload.new.severity === 'critical' ? "destructive" : "default",
          });
        }
      )
      .subscribe();

    return () => {
      supabase.removeChannel(channel);
    };
  }, []);

  if (isLoading) {
    return <div className="p-4">Loading vulnerabilities...</div>;
  }

  return (
    <div className="p-4 space-y-4">
      <h2 className="text-2xl font-semibold mb-4">Security Vulnerabilities</h2>
      
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        {vulnerabilities?.map((vulnerability) => (
          <Card key={vulnerability.id} className="hover:shadow-lg transition-shadow">
            <CardHeader className="flex flex-row items-center space-x-2">
              <div className="flex items-center space-x-2">
                {severityIcons[vulnerability.severity]}
                <CardTitle className="text-sm font-medium">
                  {vulnerability.source.toUpperCase()}
                </CardTitle>
              </div>
              <Badge 
                variant={vulnerability.severity === 'critical' ? 'destructive' : 'default'}
                className="ml-auto"
              >
                {vulnerability.severity}
              </Badge>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-muted-foreground">{vulnerability.description}</p>
              {vulnerability.file_path && (
                <p className="text-xs mt-2 text-muted-foreground">
                  {vulnerability.file_path}
                  {vulnerability.line_number && `:${vulnerability.line_number}`}
                </p>
              )}
              <Badge variant="outline" className="mt-2">
                {vulnerability.status}
              </Badge>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
}