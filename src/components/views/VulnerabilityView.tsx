import React, { useEffect } from 'react';
import { useQuery } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { Vulnerability } from '@/types/vulnerability';
import { VulnerabilityList } from '../vulnerability/VulnerabilityList';
import { toast } from '@/hooks/use-toast';
import { RealtimePostgresChangesPayload } from '@supabase/supabase-js';

export function VulnerabilityView() {
  const { data: vulnerabilities, isLoading } = useQuery({
    queryKey: ['vulnerabilities'],
    queryFn: async () => {
      const { data, error } = await supabase
        .from('vulnerability_scans')
        .select('*')
        .order('created_at', { ascending: false });

      if (error) {
        toast({
          title: "Error fetching vulnerabilities",
          description: error.message,
          variant: "destructive",
        });
        throw error;
      }

      return data as Vulnerability[];
    }
  });

  useEffect(() => {
    const channel = supabase
      .channel('vulnerability-changes')
      .on(
        'postgres_changes',
        { event: '*', schema: 'public', table: 'vulnerability_scans' },
        (payload: RealtimePostgresChangesPayload<Vulnerability>) => {
          if (payload.new && 'severity' in payload.new) {
            toast({
              title: "New Vulnerability Detected",
              description: `A new ${payload.new.severity} severity issue was found.`,
              variant: payload.new.severity === 'critical' ? "destructive" : "default",
            });
          }
        }
      )
      .subscribe();

    return () => {
      supabase.removeChannel(channel);
    };
  }, []);

  if (isLoading) {
    return <div className="p-4">Loading vulnerabilities...</div>;
  }

  return (
    <div className="p-4 space-y-4">
      <h2 className="text-2xl font-semibold mb-4">Security Vulnerabilities</h2>
      <VulnerabilityList vulnerabilities={vulnerabilities || []} />
    </div>
  );
}